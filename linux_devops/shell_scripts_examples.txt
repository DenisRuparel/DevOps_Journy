shell scripting basics:
----------------

1) echo "<enter your message to print>"
-> it prints the message what you want to print
-> we can also write this command like this echo "hello i am denis ruparel" > testfile.txt

2) nano <file_name>.sh
-> it creates shell file in your directory

demo script:
----------
#!/bin/bash
echo "hello world"

3) bash <file_name>.sh
-> it runs (executes) the shell script file

--------------------------
or another way to run shell file
--------------------------

*) ./<file_name>.sh
-> note: if permission is given by you[admin] to execute the file then this command will work otherwise first you[admin] should give the information to run the file

4) chmod [options] mode[,mode] file1 [file2 ...]
-> chmod modifying the permissions for the owner, group, and others for a file or directory

shell scripts examples:
------------------

1)
#!/bin/bash
echo "hello world"

2) 
#!/bin/bash
mkdir new_dir
cd new_dir
touch newfile.txt
echo "this is a demo script" > newfile.txt
cat newfile.txt

3) variables:
----------
#!/bin/bash
echo $BASH
name="Denis"
echo "Hello ${name}"

-> # is use for comment in shell script

4) read input from user:
--------------------
echo "Enter Your Name: "
read name
echo "Your Name is: ${name}"
read -p "Enter your age: " age
echo "${age}"

5) for sleep:
----------
echo "Hello!"
sleep 2
echo "my name is denis"
sleep 2
echo "bye"

6) for giving arguments:
--------------------
#!/bin/bash
echo "hello i am $1"

for run:
bash filename.sh <your_argument>

7) conditional statments:
--------------------
#!/bin/bash
read -p "Enter your marks: " marks

if [[ $marks -ge 80 ]]
then
        echo "First"
elif [[ $marks -ge 60 ]]
then
        echo "Second"
else
        echo "Fail"
fi

8)Array:
------
#!/bin/bash
#Array
myArray=( 1 2 30.5 Hello "Hey man" )
echo "${myArray[0]}"
echo "${myArray[2]}"
echo "${myArray[*]}"

#how to find no. of values in an array
echo "length: ${#myArray[*]}"

#get value from specific position
echo "values from index 2-3 ${myArray[*]:2:2}"

#update an array with new values
myArray+=( New 30 40 )
echo "new array ${myArray[*]}"

#how to store key value pairs
declare -A myArray2
myArray2=( [name]=Denis [age]=20 [city]=veraval )
echo "Name is: ${myArray2[name]}"
echo "Age is: ${myArray2[age]}"

9) String:
-------
#!/bin/bash

myStr="My Name is Denis Ruparel"

# find length of string
echo "Length: ${#myStr}"

# upper case
echo "Upper Case: ${myStr^^}"

# Lower Case
echo "Lower Case: ${myStr,,}"

# replace the word
echo "Replace: ${myStr/Denis/Nemis}"

# slice
echo "slice: ${myStr:11:15}"

10)Airthmatic Operations:
----------------------
#!/bin/bash
#Maths Calculation

a=10
b=2

let add=$a+$b
let sub=$a-$b
let mul=$a*$b
let div=$a/$b

echo "Addition is: $add"
echo "Subtraction is: $sub"
echo "Multiplication is: $mul"
echo "Division is: $div"

echo "$(($a+$b))"

11) switch case
----------------------
#!/bin/bash
echo "Choose Option: "
echo "a = To see current date"
echo "b = To see list of files"

read choice

case $choice in
        a) date;;
        b) ls;;
        *) echo "Enter valid input"
esac

12)Logical Operators:
------------------
#!/bin/bash

# AND operator
read -p "what is your age: " age
read -p "Your Country: " country

if [[ $age -ge 18 ]] && [[ $country -eq "india" ]]
then
        echo "you can vote"
else
        echo "you can't vote"
fi

# OR  operator
read -p "what is your age: " age
read -p "your country: " country

if [[ $age -ge 18 ]] || [[ $country -eq "india" ]]
then
        echo "you can vote"
else
        echo "you can't vote"
fi

# Ternary operation
age=18
[[ $age -ge 18 ]] && echo "Adult" || echo "Minor"

13)for loops:
----------
#!/bin/bash
for i in 1 2 3 4 5 6 8 9 10
do
        echo "Number is: $i"
done

for name in Raju Sham Baburao
do
        echo "Name is: $name"
done

for i in {1..10}
do
        echo "Number is: $i"
done

FILE="/home/vagrant/shell_scripts/names.txt"
for name in $(cat $FILE)
do
        echo "name is: $name"
done

14)while loops:
------------
#!/bin/bash
count=0
num=10
while [[ $count -le $num ]]
do
        echo "numbers: $count"
        let count++
done

15)until loops:
------------
#!/bin/bash
a=10
until [[ $a -eq 1 ]]
do
        echo $a
        a=`expr $a - 1`
done

16)infinite while loop:
------------------
#!/bin/bash
while true
do
        echo "Hi"
        sleep 2s
done

17)infinite for loop:
----------------
#!/bin/bash
for (( ;; ))
do
        echo "Hello"
        sleep 2s
done

18)while loop with file:
-------------------
#!/bin/bash
while read myVar
do
        echo "names from file is $myVar"
done < names.txt

# to read content from csv file
while IFS="," read id name age
do
        echo "Id is: $id"
        echo "Name is: $name"
        echo "Age is: $age"
done < names.csv

# second way
cat names.csv | awk 'NR!=1 {print}' | while IFS="," read -r id name age; do
  echo "ID: $id, Name: $name, Age: $age"
done

19)functions:
-----------
#!/bin/bash
function myfun {
        echo "Hi"
}

addition() {
        local a=$1
        local b=$2
        let sum=$a+$b
        echo "$sum"
}

myfun
addition 10 20

20) argument passing:
------------------
#!/bin/bash
set -x
# to access the arguments

echo "First argument is $1"
echo "Second argument is $2"

echo "All the arguments are - $@"

echo "Number of arguments are: $#"

# for loop to access the values from arguments

for filename in $@
do
        echo "Copying File - $filename"
done

# shifting arguments
echo "creating user"
echo "username is $1"
shift
echo "description is $@"

21) break & continue:
------------------
#!/bin/bash
# confirm that given number is present or not
read -p "Enter your no: " no

for i in 1 2 3 4 5 6 7 8 9
do
        if [[ $no -eq $i ]]
        then
                echo "$no is Found..."
                break
        fi
        echo "number is $i"
done

# print odd no:
for i in 1 2 3 4 5 6 7 8 9 10
do
        let r=$i%2
        if [[ $r -eq 0 ]]
        then
                continue
        fi
        echo "odd no. is $i"
done





website connectivity check:
----------------------
#!/bin/bash
read -p "which site you want to check?" site
ping -c 1 $site
sleep 5s

if [[ $? -eq 0 ]]
then
        echo "Successfully Connected $site"
else
        echo "Unable to connect $site"
fi

check file or directory exist or not
----------------------------
#!bin/bash
FILEPATH="/home/vagrant/shell_scripts/names.csv"
DIRNAME="/home/vagrant/shell_scripts"

if [[ -f $FILEPATH ]]  || [[ -d $DIRNAME ]]
then
        echo "file or dir exist"
else
        echo "file or dir not exist"
        exit 1
fi

#generating a random number between 1 to 6:
---------------------------------------
#!/bin/bash
NO=$(( $RANDOM % 6 + 1 ))
echo "Number is: $NO"

# checking if the user is root or not:
------------------------------
#!/bin/bash
if [[ $UID -eq 0 ]]
then
        echo "User is Root"
else
        echo "User is not Root"
fi

# checking scriptname:
------------------
#!/bin/bash
echo "Name of this script is ${0}"

# logger:
-------
#!/bin/bash
# example of logging
logger "This is log from ${0}"